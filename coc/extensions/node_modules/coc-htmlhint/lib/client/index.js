var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  if (module2 && module2.__esModule)
    return module2;
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", {value: module2, enumerable: true})), module2);
};

// src/client/index.ts
__markAsModule(exports);
__export(exports, {
  activate: () => activate
});
var path = __toModule(require("path"));
var import_coc = __toModule(require("coc.nvim"));
async function activate(context) {
  const config = import_coc.workspace.getConfiguration("htmlhint");
  const isEnable = config.get("enable", true);
  if (!isEnable) {
    return;
  }
  const serverModulePath = path.join(__dirname, "..", "server", "server.js");
  const debugOptions = {execArgv: ["--nolazy", "--inspect=6010"], cwd: process.cwd()};
  const serverOptions = {
    run: {module: serverModulePath, transport: import_coc.TransportKind.ipc},
    debug: {module: serverModulePath, transport: import_coc.TransportKind.ipc, options: debugOptions}
  };
  const extensionDocumentSelector = config.get("documentSelector") || [
    {scheme: "file", language: "html"},
    {scheme: "untitled", language: "html"}
  ];
  const clientOptions = {
    documentSelector: extensionDocumentSelector,
    diagnosticCollectionName: "htmlhint",
    synchronize: {
      configurationSection: "htmlhint",
      fileEvents: import_coc.workspace.createFileSystemWatcher("**/.htmlhintrc")
    }
  };
  const forceDebug = false;
  const client = new import_coc.LanguageClient("HTML-hint", serverOptions, clientOptions, forceDebug);
  context.subscriptions.push(new import_coc.SettingMonitor(client, "htmlhint.enable").start());
}
